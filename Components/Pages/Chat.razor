@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    <h2 class="chat-title">Real-Time Chat</h2>

    User: John Doe

    <div class="form-group">
        <label for="messageInput">
            Message:
        </label>
        <input id="messageInput" @bind="messageInput" class="form-control" placeholder="Enter your message" size="50" />
    </div>

    <button @onclick="Send" class="btn btn-primary" disabled="@(!IsConnected)">Send</button>

    <hr />

    <ul id="messagesList" class="messages-list">
        @foreach (var message in messages)
        {
            <li class="message-item">@message</li>
        }
    </ul>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", "John Doe", messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}